%% cropConvert
%
% Crops image created by helical_sync_toolbox in X and Y and converts them to .nii
% format for registration. (deedsMIND takes only .nii files and cannot handle 
% typical full image dimensions.  
%
% cropConvert(imageFolder, niiFolder, staticFolder, modelFolder, numScans, useDefaultDims, 
% cropDims (optiona))
%
% Arguments:
% imageFolder: directory containing .raw/.mhd images created by helical_sync_toolbox
% niiFolder: directory to write cropped .nii files
% staticFolder: directory to write cropped .raw/.mhd files.  Should be used as patient.static_folder
% modelFolder: original image size and cropped dimensions are saved here.  patient.folder
% numScans: number of scans to process
% useDefaultDims: bool.  If false,  the first scan is loaded and opened using view3dgui. 
% the user is then requried to supply the new image dimensions. Defult image 
% dimensions are 100:375, 75:425.
%
% The original image size and the cropped dimensions are saved to the modelFolder
% with the filename crop.mat, which contains originalSize, and cropDims.  cropDims
% is a 2 x 2 matrix such that: 
% croppedImage = original(cropDims(1,1):cropDims(1,2),cropDims(2,1):cropDims(2,2),:) 
%
% Dependencies: make_nii, save_nii (File exchange)
%
% NB: cropConvert also moves the .mat files generated by the sync code to staticFolder.
% cropConvert only crops in X and Y.

function cropConvert(varargin)

imageFolder = varargin{1};
niiFolder = varargin{2};
staticFolder = varargin{3};
modelFolder = varargin{4};
numScans = varargin{5};
useDefaultDims = varargin{6};


% Create output directories
mkdir(niiFolder);
mkdir(staticFolder);
mkdir(modelFolder);

% Determine crop dimensions
if nargin > 6
cropDims = varargin{7};

elseif ~useDefaultDims
% Load first scan
img = metaImageRead(fullfile(imageFolder,sprintf('scan_%d_cut.mhd',1)));
view3dgui(img);
cropDims = input(sprintf('Enter cropping dimensions in the from of: [ rowStart, rowEnd; colStart colEnd ]: '));

else
cropDims = [100,375;75,425];
end

% Process images
imgCrop = waitbar(0,'Processing images...');
for ind = 1:numScans
    
    % Load image
    img = metaImageRead(fullfile(imageFolder,sprintf('scan_%d_cut.mhd',ind)));

    % Save original image size
   if ind == 1
	originalSize = size(img);
   end 
   
   imgCropped = img(cropDims(1,1):cropDims(1,2),cropDims(2,1):cropDims(2,2),:);
   % Convert to nii
   imgNii = make_nii(imgCropped,[1 1 1]);
   save_nii(imgNii,fullfile(niiFolder,sprintf('scan_%d_cut.nii',ind)));
    
   % Write cropped MHD
   metaImageWrite(imgCropped,fullfile(staticFolder,sprintf('scan_%d_cut',ind)),'ElementSpacing',[1 1 1]);
   
   copyCmd = ['cp -f "' fullfile(imageFolder,sprintf('image_scan_%d.mat',ind)) '" "' staticFolder '"']; 
   system(copyCmd);
   waitbar(ind/numScans, imgCrop);
end
save(fullfile(modelFolder,'crop.mat'),'cropDims','originalSize');
close(imgCrop)
